version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      delete_stack:
        default: "haskdncmas80qw9e1"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.delete_stack >>
            exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front end test
          command: |
            cd frontend
            npm i
            npm run test
            # exit 1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm run test
            # exit 1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend security scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            # exit 1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend security scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            # exit 1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    working_directory: /home/project/
    steps:
      - checkout
      - run:
          name: install tar
          command: yum install -y tar
      - run:
          name: install gzip
          command: yum install -y gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity_automated \
              --stack-name "haskdncmas80qw9e1-udacity-backend" \
              --parameter-overrides ID="haskdncmas80qw9e1"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity_automated  \
              --stack-name "haskdncmas80qw9e1-udacity-frontend" \
              --parameter-overrides ID="haskdncmas80qw9e1"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation list-exports \
            --query "Exports[?Name==\`haskdncmas80qw9e1-udacity-backend-PublicIp\`].Value" \
            --no-paginate --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: /home/project/
          paths:
            - .circleci/ansible/inventory.txt
      - run:
          name: display the present folder file
          command: pwd; ls;
      - run:
          name: display the inventory file
          command: cat .circleci/ansible/inventory.txt
      - run:
          name: destroy-environment
          command: aws cloudformation delete-stack \
            --stack-name "haskdncmas80qw9e1-udacity-frontend"
          when: on_fail  
      - run:
          name: destroy-environment
          command: aws cloudformation delete-stack \
            --stack-name "haskdncmas80qw9e1-udacity-backend"
          when: on_fail     

  configure-infrastructure:
    docker:
      - image: demisto/ansible-runner:1.0.0.24037
    working_directory: /home/project/
    environment:
      ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "aa:93:0c:04:07:fc:84:37:29:a8:94:7e:7b:ce:c4:d7"
      - attach_workspace:
          at: /home/project/
      - run:
          name: look at workspace contents
          command: ls -al /home/project/; cat /home/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            ansible-playbook /home/project/.circleci/ansible/configure-server.yml -i /home/project/.circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            ansible-playbook /home/project/.circleci/ansible/deploy-backend.yml -i /home/project/.circleci/ansible/inventory.txt
      - run:
          name: destroy-environment
          command: aws cloudformation delete-stack \
            --stack-name "haskdncmas80qw9e1-udacity-frontend"
          when: on_fail  
      - run:
          name: destroy-environment
          command: aws cloudformation delete-stack \
            --stack-name "haskdncmas80qw9e1-udacity-backend"
          when: on_fail     

  run-migrations:
      docker:
      - image: circleci/node:13.8.0
      steps:
        - checkout
        - attach_workspace:
            at: .
        - run:
            name: Install AWS CLI dependencies
            working_directory: /tmp
            command: |
              sudo apt-get update && sudo apt-get install -yy less
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
        - run:
            name: Run migrations
            no_output_timeout: 30m
            working_directory: ./backend
            command: |
              npm install
              npm run migrations > migration.log
              export migration_status=$(cat migration.log | grep -c "has been executed successfully")
              tar -zcvf ~/backend.tar.gz .
              echo $migration_status
              ls
        - run:
            name: check contents of file
            command: echo $migration_status
        - persist_to_workspace:
            root: ~/
            paths:
              - backend.tar.gz
              - migration.log

  deploy-frontend:
    docker: 
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar
            yum install -y gzip
            curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            export TERM=msys
            cd ~/project/frontend
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://$BACKEND_IP:3030"
            echo "$API_URL"
            echo API_URL >> ".env"
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            npm i
            npm run build
            aws s3 sync dist s3://udapeople-haskdncmas80qw9e1 --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: demisto/ansible-runner:1.0.0.24037
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "aa:93:0c:04:07:fc:84:37:29:a8:94:7e:7b:ce:c4:d7"
      - run:
          name: create inventory file
          command: |
            pip install awscli
            echo "[web]" > ~/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - run:
          name: install_dependencies
          command: |
            apt-get update
            apt-get install -y npm nodejs
            npm install -g typescript
      - run:
          name: build backend
          command: |
            cd ~/project/backend
             npm i
            npm run build
      #  - attach_workspace:
      #     at: /home/project/workspace/
      # - run:
      #     name: zip backend
      #     command: |
      #       mkdir -p /home/project/backend
      #       tar -czvf  /home/project/backend.tar.gz /home/project/backend
      # - run:
      #     name: look at workspace contents
      #     command: ls -al /home/project/workspace/; ls -al /home/project/workspace/.circleci/ansible; cat /home/project/workspace/.circleci/ansible/inventory.txt
      # - run:
      #     name: Install dependencies
      #     command: |
      #       ansible-playbook /home/project/.circleci/ansible/configure-server.yml -i /home/project/.circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          command: |
            cd /home/project/
            tar -vcf backend.tar.gz backend
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKENDIP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "http://${BACKENDIP}:3030"
            curl "http://${BACKENDIP}:3030/api/status"
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [main, update/deploy_infra]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      - deploy-backend
          # requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]