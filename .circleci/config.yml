version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      delete_stack:
        default: "haskdncmas80qw9e8"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.delete_stack >>
            exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front end test
          command: |
            cd frontend
            npm i
            npm run test
            # exit 1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm run test
            # exit 1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend security scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            # exit 1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend security scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            # exit 1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    working_directory: /home/project/
    steps:
      - checkout
      - run:
          name: install tar
          command: yum install -y tar
      - run:
          name: install gzip
          command: yum install -y gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity_automated \
              --stack-name "haskdncmas80qw9e8-udacity-backend" \
              --parameter-overrides ID="haskdncmas80qw9e8"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity_automated  \
              --stack-name "haskdncmas80qw9e8-udacity-frontend" \
              --parameter-overrides ID="haskdncmas80qw9e9"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation list-exports \
            --query "Exports[?Name==\`haskdncmas80qw9e8-udacity-backend-PublicIp\`].Value" \
            --no-paginate --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: /home/project/
          paths:
            - .circleci/ansible/inventory.txt
      - run:
          name: display the present folder file
          command: pwd; ls;
      - run:
          name: display the inventory file
          command: cat .circleci/ansible/inventory.txt
      - run:
          name: destroy-environment
          command: aws cloudformation delete-stack \
            --stack-name "haskdncmas80qw9e8-udacity-frontend"
          when: on_fail  
      - run:
          name: destroy-environment
          command: aws cloudformation delete-stack \
            --stack-name "haskdncmas80qw9e8-udacity-backend"
          when: on_fail     

  configure-infrastructure:
    docker:
      - image: ansible/ansible-runner
    working_directory: /home/project/
    environment:
      ANSIBLE_HOST_KEY_CHECKING: false
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "b9:c0:14:ea:65:de:ec:dd:e8:33:67:91:6d:7e:f6:6f"
      - attach_workspace:
          at: /home/project/
      - run:
          name: look at workspace contents
          command: ls -al /home/project/; cat /home/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            ansible-playbook /home/project/.circleci/ansible/configure-server.yml -i /home/project/.circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            ansible-playbook /home/project/.circleci/ansible/deploy-backend.yml -i /home/project/.circleci/ansible/inventory.txt
      - run:
          name: destroy-environment
          command: aws cloudformation delete-stack \
            --stack-name "haskdncmas80qw9e8-udacity-frontend"
          when: on_fail  
      - run:
          name: destroy-environment
          command: aws cloudformation delete-stack \
            --stack-name "haskdncmas80qw9e8-udacity-backend"
          when: on_fail     

  run-migrations:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend; 
            echo "present folder `pwd`";
            echo "installing npm"; npm install; 
            echo "creating migration file"; touch migrations_log.txt; 
            echo "install tsc"; sudo npm install typescript -g
            echo "running migratations"; npm run migrations >> migrations_log.txt; 
            echo ":::MIGRATION LOGS:::"; cat migrations_log.txt
      - run:
          name: check contents of file
          command: cat backend/migrations_log.txt
      - run:
          name: Send migration results to memstash
          command: |
              if grep -q "has been executed successfully" backend/migrations_log.txt;
              then
                echo "inside if"
                curl -H "Content-Type: text/plain" -H "token: 66245dc3-feb9-43fe-8207-28533082672b" --request PUT --data "1" https://api.memstash.io/values/
              else
                echo "inside else"
                cd backend; npm run migrations:revert
              fi
     # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [main]
      # - configure-infrastructure:
          # requires: [deploy-infrastructure]
      - run-migrations
          # requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]